tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-aws-plugin/1.5.1.2/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - common.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_attribute: [ centos_core_ami, aws_resource_id ] }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ec2-user

  agent_group:
    default: wheel

  manager_network:
    default: default

  install_method:
    default: remote

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }

node_types:
  kubernetes_host:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      kubecpu:
        # by default: amount of cpu's on vm avaible for kubepods,
        # in most cases it must be same as full count of cpu on vm
        default: 1
      kubemem:
        # by default: amount of memory on vm avaible for kubepods,
        # in most cases it must be same as full count of memory on vm
        default: 1024
      agent_config:
        default:
          network: { get_input: manager_network }
          install_method: { get_input: install_method }
          user: { get_input: agent_user }
          port: 22
          key: { get_secret: agent_key_private }
      aws_config:
        default: *aws_config
      image_id:
        default: { get_input: ami }
      instance_type:
        default: { get_input: instance_type }

node_templates:

  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'CentOS 7.3.1611 x86_64 with cloud-init (HVM)'
          - Name: owner-id
            Values:
            - '057448758665'
      client_config: *client_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        groups:
          - docker
        users:
          - name: { get_input: agent_user }
            primary-group: { get_input: agent_group }
            groups: docker
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_secret: agent_key_public }

  kubemanager:
    type: kubernetes_host
    capabilities:
      scalable:
        properties:
          default_instances: 1
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: kubemanager_port
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
      - type: cloudify.relationships.depends_on
        target: centos_core_ami
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  kubemanager_port:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.connected_to_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.connected_to_security_group
        target: security_group
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: kubemanager_port_elastic_ip

  kubemanager_port_elastic_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc

  kubeinstance:
    type: kubernetes_host
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: kubeinstance_port
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
      - type: cloudify.relationships.depends_on
        target: centos_core_ami
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  loadbalancerinstance:
    type: kubernetes_host
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: kubeloadbalancer_port
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config
      - type: cloudify.relationships.depends_on
        target: centos_core_ami
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              placement: { get_secret: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  kubeinstance_port:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.aws.relationships.connected_to_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.connected_to_security_group
        target: security_group
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: kubeinstance_port_elastic_ip

  kubeloadbalancer_port:
    type: cloudify.aws.nodes.Interface
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.aws.relationships.connected_to_subnet
        target: public_subnet
      - type: cloudify.aws.relationships.connected_to_security_group
        target: security_group
      - type: cloudify.aws.relationships.connected_to_elastic_ip
        target: kubeloadbalancer_port_elastic_ip

  kubeinstance_port_elastic_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc

  kubeloadbalancer_port_elastic_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc

  security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Kubernetes System
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 53
          to_port: 53
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 53
          to_port: 53
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 2379
          to_port: 2379
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 3306
          to_port: 3306
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 4001
          to_port: 4001
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 4789
          to_port: 4789
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 6443
          to_port: 6443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 6443
          to_port: 6443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 6783
          to_port: 6784
          cidr_ip: 0.0.0.0/0
        - ip_protocol: udp
          from_port: 6783
          to_port: 6784
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 9090
          to_port: 9090
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 10250
          to_port: 10250
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 30000
          to_port: 40000
          cidr_ip: 0.0.0.0/0
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: private_subnet_id }
      cidr_block:  N/A
      availability_zone:  N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_secret: vpc_id }
      cidr_block: N/A

groups:

  k8s_node_scale_group:
    members:
      - kubernetes_slave_node
      - kubernetes_slave_kubernetes
      - kubernetes_slave_kubelet_volume
      - kubernetes_slave_docker
      - kubernetes_slave_cfy_go
      - kubernetes_slave_buildtools
      - kubeinstance
      - kubeinstance_port
      - kubeinstance_port_elastic_ip

  k8s_load_scale_group:
    members:
      - loadbalancerinstance
      - loadbalancerinstance_proxy

policies:

  kubernetes_node_vms_scaling_policy:
    type: cloudify.policies.scaling
    properties:
    properties:
      min_instances: 1
      max_instances: 20
      default_instances:  1
    targets: [k8s_node_scale_group]

  kubernetes_load_vms_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      min_instances: 1
      max_instances: 20
      default_instances:  1
    targets: [k8s_load_scale_group]
