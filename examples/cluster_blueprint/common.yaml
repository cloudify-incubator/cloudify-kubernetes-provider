tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1/types.yaml
  - monitoring.yaml

inputs:

  cfy_tenant:
    type: string
    default: default_tenant

  cfy_password:
    type: string
    default: admin

  cfy_user:
    type: string
    default: admin

  cfy_host:
    type: string
    default: { get_attribute: [ kubemanager, cloudify_agent, broker_ip ] }

node_types:

  # type represent node with installed kubernetes code
  kubernetes_type:
    derived_from: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes-uninstall.sh
        start:
          implementation: scripts/kubernetes-install.sh
        delete:
          implementation: scripts/kubernetes-uninstall.sh

  # type represent node with installed docker code
  docker_type:
    derived_from: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/tools-install.sh
        configure:
          implementation: scripts/docker-uninstall.sh
        start:
          implementation: scripts/docker-install.sh
        delete:
          implementation: scripts/docker-uninstall.sh

###############################################################################
# Node templates section
###############################################################################
node_templates:

  docker:
    type: docker_type
    relationships:
    - target: kubeinstance
      type: cloudify.relationships.contained_in

  clienttools_build:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/client-build.sh
        configure:
          implementation: scripts/prepare-mount.sh
          inputs:
            # mount params
            CFY_USER: { get_input: cfy_user }
            CFY_PASSWORD: { get_input: cfy_password }
            CFY_TENANT: { get_input: cfy_tenant }
            CFY_HOST: { get_input: cfy_host }
        delete:
          implementation: scripts/code-delete.sh
      maintenance:
        mount: scripts/mount.py
        unmount: scripts/unmount.py
    relationships:
    - target: docker
      type: cloudify.relationships.contained_in

  kubenetes:
    type: kubernetes_type
    relationships:
    - target: docker
      type: cloudify.relationships.contained_in

  kubemanager_docker:
    type: docker_type
    relationships:
    - target: kubemanager
      type: cloudify.relationships.contained_in

  tools_build:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/code-download.sh
        configure:
          implementation: scripts/code-build.sh
        delete:
          implementation: scripts/code-delete.sh
    relationships:
    - target: kubemanager_docker
      type: cloudify.relationships.contained_in

  manager_kubenetes:
    type: kubernetes_type
    relationships:
    - target: tools_build
      type: cloudify.relationships.contained_in

  config_export:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes-master-config.sh
          inputs:
            CFY_USER: { get_input: cfy_user }
            CFY_PASSWORD: { get_input: cfy_password }
            CFY_TENANT: { get_input: cfy_tenant }
            CFY_HOST: { get_input: cfy_host }
        start:
          implementation: scripts/export_config.py
    relationships:
    - target: manager_kubenetes
      type: cloudify.relationships.contained_in
    - target: tools_build
      type: cloudify.relationships.depends_on

  kubenetes_slave:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes-join.sh
          inputs:
            TOKEN: { get_attribute: [config_export, token] }
            IP: { get_attribute: [kubemanager, ip] }
    relationships:
    - target: kubenetes
      type: cloudify.relationships.contained_in
    - target: clienttools_build
      type: cloudify.relationships.depends_on
    - target: config_export
      type: cloudify.relationships.depends_on

  kubenetes_final_state:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes-master-status.sh
        start:
          implementation: scripts/create_secrets.py
        stop:
          implementation: scripts/delete_secrets.py
    relationships:
    - target: config_export
      type: cloudify.relationships.contained_in
    - target: kubenetes_slave
      type: cloudify.relationships.depends_on
