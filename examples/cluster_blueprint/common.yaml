tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1/types.yaml
  - monitoring.yaml

plugins:
  cloudify_node_drop:
    executor: central_deployment_agent
    source: cloudify_node_drop

workflows:
  delete:
    mapping: cloudify_node_drop.cloudify_drop.workflow.delete
    parameters:
      scalable_entity_name:
        description: >
          Which node/group to scale. Note that the parameter specified
          should denote the node/group name and NOT the node/group instance id.
      delta:
        description: >
            How many node/group instances should be added/removed.
            A positive number denotes increase of instances.
            A negative number denotes decrease of instances.
        default: 1
        type: integer
      scale_compute:
        description: >
            If a node name is passed as the `scalable_entity_name` parameter
            and that node is contained (transitively) within a compute node
            and this property is 'true', operate on the compute node instead
            of the specified node.
        default: false
      ignore_failure:
        default: false
        type: boolean
      removed_ids_exclude_hint:
        description: >
            Node instances denoted by these instance ids should be *kept* if
            possible.
        default: []
      removed_ids_include_hint:
        description: >
            Node instances denoted by these instance ids should be *removed*
            if possible.
        default: []

inputs:

  cfy_tenant:
    type: string
    default: default_tenant

  cfy_password:
    type: string
    default: admin

  cfy_user:
    type: string
    default: admin

  cfy_host:
    type: string
    default: { get_attribute: [ kubemanager, cloudify_agent, broker_ip ] }

  update_package_manager:
    type: boolean
    default: false

node_types:

  # type represent node with installed kubernetes code
  kubernetes_type:
    derived_from: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes/uninstall.sh
        start:
          implementation: scripts/kubernetes/install.sh
        delete:
          implementation: scripts/kubernetes/uninstall.sh

  # type represent node with installed docker code
  cloudify.nodes.ApplicationServer.Docker:
    derived_from: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/docker/install.py
          inputs:
            agent_user:
              default: { get_input: agent_user }
            update_package_manager:
              default: { get_input: update_package_manager }
        delete:
          implementation: scripts/docker/uninstall.py

  cloudify.nodes.SoftwareComponent.BuildTools:
    derived_from: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/buildtools/install.py

  cloudify.nodes.ApplicationServer.kubernetes.Node:
    derived_from: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/kubernetes/node/create.py

###############################################################################
# Node templates section
###############################################################################
node_templates:

  kubernetes_slave_node:
    type: cloudify.nodes.ApplicationServer.kubernetes.Node
    relationships:
    - target: kubeinstance
      type: cloudify.relationships.contained_in

  kubeinstance_buildtools:
    type: cloudify.nodes.SoftwareComponent.BuildTools
    relationships:
    - target: kubeinstance
      type: cloudify.relationships.contained_in

  kubernetes_master_node:
    type: cloudify.nodes.ApplicationServer.kubernetes.Node
    relationships:
    - target: kubemanager
      type: cloudify.relationships.contained_in

  kubemanager_buildtools:
    type: cloudify.nodes.SoftwareComponent.BuildTools
    relationships:
    - target: kubemanager
      type: cloudify.relationships.contained_in

  docker:
    type: cloudify.nodes.ApplicationServer.Docker
    relationships:
    - target: kubeinstance
      type: cloudify.relationships.contained_in

  kubemanager_docker:
    type: cloudify.nodes.ApplicationServer.Docker
    relationships:
    - target: kubemanager
      type: cloudify.relationships.contained_in

  clienttools_build:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/client-build.sh
        configure:
          implementation: scripts/prepare-mount.sh
          inputs:
            # mount params
            CFY_USER: { get_input: cfy_user }
            CFY_PASSWORD: { get_input: cfy_password }
            CFY_TENANT: { get_input: cfy_tenant }
            CFY_HOST: { get_input: cfy_host }
        delete:
          implementation: scripts/codes/delete.sh
      maintenance:
        mount: scripts/mount.py
        unmount: scripts/unmount.py
    relationships:
    - target: docker
      type: cloudify.relationships.contained_in
    - target: kubeinstance_buildtools
      type: cloudify.relationships.depends_on

  kubenetes:
    type: kubernetes_type
    relationships:
    - target: docker
      type: cloudify.relationships.contained_in

  tools_build:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/codes/download.sh
        configure:
          implementation: scripts/codes/build.sh
        delete:
          implementation: scripts/codes/delete.sh
    relationships:
    - target: kubemanager_docker
      type: cloudify.relationships.contained_in
    - target: kubemanager_buildtools
      type: cloudify.relationships.depends_on

  manager_kubenetes:
    type: kubernetes_type
    relationships:
    - target: tools_build
      type: cloudify.relationships.contained_in

  config_export:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes/master-config.sh
          inputs:
            CFY_USER: { get_input: cfy_user }
            CFY_PASSWORD: { get_input: cfy_password }
            CFY_TENANT: { get_input: cfy_tenant }
            CFY_HOST: { get_input: cfy_host }
        start:
          implementation: scripts/export_config.py
    relationships:
    - target: manager_kubenetes
      type: cloudify.relationships.contained_in
    - target: tools_build
      type: cloudify.relationships.depends_on

  kubenetes_slave:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes/join.sh
          inputs:
            TOKEN: { get_attribute: [config_export, token] }
            IP: { get_attribute: [kubemanager, ip] }
    relationships:
    - target: kubenetes
      type: cloudify.relationships.contained_in
    - target: clienttools_build
      type: cloudify.relationships.depends_on
    - target: config_export
      type: cloudify.relationships.depends_on

  kubenetes_final_state:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/kubernetes/master-status.sh
        start:
          implementation: scripts/create_secrets.py
        stop:
          implementation: scripts/delete_secrets.py
    relationships:
    - target: config_export
      type: cloudify.relationships.contained_in
    - target: kubenetes_slave
      type: cloudify.relationships.depends_on

  kubenetes_autoscale_build:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: scripts/codes/scale-build.sh
        start:
          implementation: scripts/codes/scale-run.sh
    relationships:
    - target: tools_build
      type: cloudify.relationships.contained_in

  kubenetes_autoscale_run:
    type: cloudify.nodes.ApplicationServer
    interfaces:
        start:
          implementation: scripts/codes/scale-run.sh
    relationships:
    - target: kubenetes_autoscale_build
      type: cloudify.relationships.depends_on
    - target: config_export
      type: cloudify.relationships.contained_in
